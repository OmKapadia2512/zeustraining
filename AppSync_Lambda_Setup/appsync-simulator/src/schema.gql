

input personalInfo {
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  phone_no: String!
  resume: String!
  portfolio_url: String
  profile_pic: String
  preferred_Job_roles_id:[Int!]!

}

input educationalQualification {

  aggregate_percentage: Float!
  passing_year: Int!
  degree: String!
  stream: String!
  college: String!
  college_city: String!
}

input professionalQualification {

  applicant_type: String!
  applied_test: Boolean!
  applied_test_role: String
  familiarTechnologies: [Int!]!
  experienced_qualification: experiencedQualification
}

input experiencedQualification {

  experience_year: Int!
  current_ctc: String!
  expected_ctc: String!
  notice_period: Boolean!
  notice_period_end: String!
  notice_period_duration: Int!
  expertiseTechnologies: [Int!]!
}

input userInput{
  personalInfo:personalInfo!
  educationalQualification:educationalQualification!
  professionalQualification:professionalQualification!
  
}



type JobRole {
  id:Int
  job_title: String!
  package: String!
  job_description: String!
  job_requirements: String!
}
type JobRoleTitle{
  job_title:String!
}

type TimeSlot{
  id:Int!
  time_slot:String!
}

type AllWalkInDrive {
  id: Int!
  guid: String!
  drive_title: String!
  start_date: String!
  end_date: String!
  location: String!
  job_Roles: [JobRoleTitle]
}
type SingleWalkInDrive{
  id: Int!
  guid: String!
  drive_title: String!
  start_date: String!
  end_date: String!
  location: String!
  job_Roles:[JobRole]
  time_slots:[TimeSlot]
}


input appliedDriveInput {
  user_id: Int!
  walk_in_drive_id: Int!
  time_slot_id: Int!
  updated_resume: String
  job_role_id: [Int!]!
}
input loginCredentials{
  userEmail:String!
  userPassword:String!
}


type loginOutput {
  id: Int
  guid: String
  first_name: String
  last_name: String
  email: String
  phone_no: String
  resume: String
  profile_pic: String
  token: String # Add token field to the output type
}

type Message{
  message:String!
  user_id:Int
}
type Error{
  message: String!
}

 type Mutation {
    appliedDrive(appliedDriveInput: appliedDriveInput!):String
    createUser(userInput:userInput):Message
    handleError: Error
 }

type Query {
  checkLogin(loginCredentials: loginCredentials!):loginOutput
  allWalkInDrives: [AllWalkInDrive]
  walkInDriveById(input:String!):SingleWalkInDrive
  authentication(token:String!):loginOutput

}